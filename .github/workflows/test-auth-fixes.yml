name: Test Authentication Fixes with Docker Config
on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'oras/provider.py'
      - 'oras/tests/test_auth_functionality.py'
      - 'test_docker_config_integration.py'

env:
  GHCR_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

jobs:
  test-docker-config-loading:
    runs-on: ubuntu-latest
    services:
      registry:
        image: ghcr.io/oras-project/registry:latest
        ports:
          - 5000:5000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests
          pip install -e .

      - name: Login to GitHub Container Registry (creates .docker/config.json)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ env.GHCR_TOKEN }}

      - name: Verify Docker config was created
        run: |
          echo "Checking Docker config file..."
          ls -la ~/.docker/
          echo ""
          echo "Docker config content:"
          cat ~/.docker/config.json
          echo ""
          echo "Checking if ghcr.io auth exists:"
          if grep -q '"ghcr.io"' ~/.docker/config.json; then
            echo "✅ Found ghcr.io authentication in Docker config"
            echo "Auth details:"
            jq '.auths["ghcr.io"]' ~/.docker/config.json
          else
            echo "❌ No ghcr.io authentication found in Docker config"
            echo "Available auths:"
            jq '.auths // {}' ~/.docker/config.json
          fi

      - name: Test authentication config loading with real .docker/config.json
        env:
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          python test_docker_config_integration.py

      - name: Validate syntax and formatting
        run: |
          python -m py_compile oras/provider.py
          pip install black
          black --check oras/provider.py
